name: Build and Release

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    env:
      Solution_Name: GlyCounter/GlyCounter.sln
      Configuration: Release
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for version calculation

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Calculate version
      id: version
      shell: pwsh
      run: |
        $commitCount = git rev-list --count HEAD
        $shortSha = git rev-parse --short HEAD
        $baseVersion = "1.0"
        $versionString = "$baseVersion.$commitCount"
        $fullVersion = "$versionString+$shortSha"
        
        # Check if this is a tag push
        $isTagPush = $env:GITHUB_REF.StartsWith('refs/tags/v')
        if ($isTagPush) {
          $tagVersion = $env:GITHUB_REF.Replace('refs/tags/v', '')
          # Ensure version format is major.minor.build
          if ($tagVersion -match '-') {
            # For prerelease tags like v1.0.0-test, convert to 1.0.0.0
            $versionString = $tagVersion.Split('-')[0]
            if ($versionString.Split('.').Length -lt 3) {
              $versionString = "$versionString.0"
            }
          } else {
            $versionString = $tagVersion
            if ($versionString.Split('.').Length -lt 3) {
              $versionString = "$versionString.0"
            }
          }
          $fullVersion = $versionString
        }
        
        echo "VERSION=$versionString" >> $env:GITHUB_OUTPUT
        echo "FULL_VERSION=$fullVersion" >> $env:GITHUB_OUTPUT
        
        # Update csproj with version
        $csprojPath = "GlyCounter/GlyCounter/GlyCounter.csproj"
        $csproj = Get-Content $csprojPath -Raw
        $csproj = $csproj -replace '<Version>.*?</Version>', "<Version>$versionString</Version>"
        $csproj = $csproj -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$versionString.0</AssemblyVersion>"
        $csproj = $csproj -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$versionString.0</FileVersion>"
        Set-Content $csprojPath $csproj

    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name

    - name: Build
      run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore -p:Version=${{ steps.version.outputs.VERSION }}

    - name: Test
      run: dotnet test $env:Solution_Name --configuration $env:Configuration --no-build --verbosity normal

    - name: Publish
      run: |
        dotnet publish GlyCounter/GlyCounter/GlyCounter.csproj --configuration $env:Configuration --output ./publish /p:PublishSingleFile=true /p:SelfContained=true /p:RuntimeIdentifier=win-x64 /p:EnableCompressionInSingleFile=true /p:Version=${{ steps.version.outputs.VERSION }}

    - name: Install NuGet
      uses: NuGet/setup-nuget@v1

    - name: Create NuGet Package
      run: |
        dotnet pack GlyCounter/GlyCounter/GlyCounter.csproj --configuration $env:Configuration /p:Version=${{ steps.version.outputs.VERSION }} --output ./nuget

    - name: Create Squirrel Release
      run: |
        mkdir -p ./Releases
        
        # Install specific version of Squirrel.Windows
        nuget install squirrel.windows -Version 1.9.0 -OutputDirectory ./packages
        
        # Get our package name that was created by dotnet pack
        $nupkgPath = Get-ChildItem -Path ./nuget -Filter *.nupkg | Select-Object -First 1 -ExpandProperty FullName
        Write-Host "Found NuGet package: $nupkgPath"
        
        # Find the Squirrel executable
        $squirrelPath = Get-ChildItem -Path ./packages -Recurse -Filter Squirrel.exe | Select-Object -First 1 -ExpandProperty FullName
        Write-Host "Found Squirrel.exe at: $squirrelPath"
        
        if (-not $squirrelPath) {
            Write-Error "Could not find Squirrel.exe in packages directory"
            exit 1
        }
        
        # Run Squirrel with detailed output
        Write-Host "Running Squirrel to create installation package..."
        & $squirrelPath --releasify $nupkgPath --releaseDir=./Releases --no-msi
        
        # Check if Setup.exe was created
        $setupPath = Join-Path -Path "./Releases" -ChildPath "Setup.exe" 
        if (Test-Path $setupPath) {
            Write-Host "Setup.exe created successfully at: $setupPath"
        } else {
            Write-Error "Failed to create Setup.exe"
            Get-ChildItem -Path "./Releases" -Recurse | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GlyCounter-${{ steps.version.outputs.VERSION }}
        path: |
          ./publish/**/*
          ./Releases/**/*
          
    - name: List files in Releases directory
      run: |
        Write-Host "Contents of Releases directory:"
        Get-ChildItem -Path "./Releases" -Recurse | ForEach-Object { Write-Host $_.FullName }

    # Only create a release if this is a tag push
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        name: GlyCounter ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          ./Releases/**/*
          ./nuget/*.nupkg
          ./publish/GlyCounter.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
