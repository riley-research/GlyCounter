name: Build and Release

on:
  push:
    branches: [master]
    tags:
      - "v*"
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: GlyCounter/GlyCounter.sln
      Project_Path: GlyCounter/GlyCounter/GlyCounter.csproj
      Configuration: Release

      Release_Directory: ./Releases

      App_Package_ID: GlyCounter

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Calculate version
        id: version
        shell: pwsh
        run: |
          # Get total commits for fallback
          $commitCount = git rev-list --count HEAD
          $shortSha = git rev-parse --short HEAD

          # Start with base version of "0.0" + commitCount
          $baseVersion = "0.0"
          $versionString = "$baseVersion.$commitCount"
          $fullVersion = "$versionString+$shortSha"

          # Check if we are building from a tag that starts with 'refs/tags/v'
          $isTagPush = $env:GITHUB_REF.StartsWith('refs/tags/v')
          if ($isTagPush) {
            # e.g. "refs/tags/v0.0.15" -> "0.0.15"
            $tagVersion = $env:GITHUB_REF.Replace('refs/tags/v', '')

            # If there's a dash (e.g. "1.2.3-alpha"), only take the part before dash
            if ($tagVersion -match '-') {
              $versionString = $tagVersion.Split('-')[0]
            } else {
              $versionString = $tagVersion
            }

            # Ensure it has at least 3 parts (Major.Minor.Patch)
            $versionParts = $versionString.Split('.')
            while ($versionParts.Length -lt 3) {
              $versionParts += "0"
            }
            $versionString = $versionParts -join '.'
            $fullVersion = $versionString
          }

          # Validate we ended up with a valid SemVer (like 0.0.15)
          if (-not ($versionString -match '^\d+\.\d+\.\d+$')) {
            Write-Error "Calculated version '$versionString' is not valid SemVer"
            exit 1
          }

          Write-Host "Calculated version = $versionString"
          echo "VERSION=$versionString" >> $env:GITHUB_OUTPUT
          echo "FULL_VERSION=$fullVersion" >> $env:GITHUB_OUTPUT

          # Update <Version>, <AssemblyVersion>, <FileVersion> in the .csproj
          $csprojPath = "$($env:Project_Path)"
          if (Test-Path $csprojPath) {
            $csproj = Get-Content $csprojPath -Raw

            # Typically assembly/file version uses 4 parts, e.g. "0.0.15.0"
            $assemblyFileVersion = "$versionString.0"

            $csproj = $csproj -replace '<Version>.*?</Version>', "<Version>$versionString</Version>"
            $csproj = $csproj -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$assemblyFileVersion</AssemblyVersion>"
            $csproj = $csproj -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$assemblyFileVersion</FileVersion>"

            Set-Content $csprojPath $csproj
          }
          else {
            Write-Error "Could not find csproj at $csprojPath"
            exit 1
          }

      - name: Restore dependencies
        run: dotnet restore $env:Solution_Name

      - name: Build
        run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore

      - name: Test
        run: dotnet test $env:Solution_Name --configuration $env:Configuration --no-build --verbosity normal

      - name: Publish Application Executable
        shell: pwsh
        run: |
          dotnet publish $env:Project_Path `
            --configuration $env:Configuration `
            --output ./publish `
            --self-contained true `
            -r win-x64 `
            /p:PublishSingleFile=false `
            /p:IncludeNativeLibrariesForSelfExtract=false

          if (-not (Test-Path "./publish/GlyCounter.exe")) {
            Write-Host "ERROR: GlyCounter.exe not found after publish."
            exit 1
          }

      - name: Install Velopack Tool (vpk)
        run: dotnet tool install -g vpk --ignore-failed-sources

      - name: Run Velopack Pack
        shell: pwsh
        run: |
          vpk pack `
            --packId $env:App_Package_ID `
            --packVersion ${{ steps.version.outputs.VERSION }} `
            --packDir ./publish `
            -o $env:Release_Directory 
          # This creates Setup.exe, releases.win.json, .nupkg, etc. in ./Releases

      - name: List files in Releases directory after Velopack
        shell: pwsh
        run: |
          Write-Host "Contents of Releases directory ($($env:Release_Directory)) after Velopack:"
          Get-ChildItem -Path $env:Release_Directory -Recurse | ForEach-Object {
            Write-Host $_.FullName
          }

      - name: Upload to GitHub Release (via vpk)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: pwsh
        env:
          VPK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          vpk upload github `
            --repoUrl "https://github.com/riley-research/GlyCounter" `
            --publish `
            --releaseName "GlyCounter ${{ steps.version.outputs.VERSION }}" `
            --tag ${{ github.ref }}
